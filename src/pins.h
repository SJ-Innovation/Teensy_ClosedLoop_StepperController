

#ifndef AXISCONTROLLER_TEENSY31_PINS_H
#define AXISCONTROLLER_TEENSY31_PINS_H

#define X_STEP_IN_PIN 14
#define X_DIR_IN_PIN 15
#define Y_STEP_IN_PIN 16
#define Y_DIR_IN_PIN 17

#define Y_STEP_OUT_PIN 12
#define Y_DIR_OUT_PIN 11
#define X_STEP_OUT_PIN 9
#define X_DIR_OUT_PIN 10

#define X_ENCODER_A_PIN 4
#define X_ENCODER_B_PIN 3
#define X_ENCODER_IND_PIN -1

#define Y_ENCODER_A_PIN 25
#define Y_ENCODER_B_PIN 32
#define Y_ENCODER_IND_PIN -1

#define ENABLE_PIN 18

#define MOTOR_STEPS_PER_MM 100.0
#define MAX_ACCEL_MMSS 2000.0
#define MAX_SPEED_MMS 170.0



#define MOTOR_STEPS_PER_ROTATION 3200.0
#define ENCODER_COUNTS_PER_ROTATION 8192.0
#define ENCODER_TO_REAL(X) ((float)(X)*(MOTOR_STEPS_PER_ROTATION/ENCODER_COUNTS_PER_ROTATION))//TODO
#define REAL_TO_ENCODER(X) ((float)(X)/(MOTOR_STEPS_PER_ROTATION/ENCODER_COUNTS_PER_ROTATION))

enum AXIS_t {
    X_AXIS, Y_AXIS
};
//#define TICKS_PER_MICROSECOND ((u_int32_t)((u_int32_t)F_BUS/(u_int32_t)1000000)) // TODO CHANGE F_BUS for OC if REQUIRED
//#define US_TO_TICKS(x) (((x)*TICKS_PER_MICROSECOND))
//#define TICKS_TO_US(x) (((x)/TICKS_PER_MICROSECOND))
#define IN_RANGE(Low, Value, High) (((Value) >= (Low) && (Value) <= (High)) ? 1:0)
//#define CURRENT_TIME ((UINT32_MAX - PIT_CVAL0))

#endif //AXISCONTROLLER_TEENSY31_PINS_H
